name: Cloudflare Maintenance

on:
  workflow_dispatch:
    inputs:
      Platform:
        description: 'Choose for which platform we are bringing up the maintenance page'
        required: true
        default: 'web'
        type: choice
        options:
          - web
          - mobile
      API:
        description: 'Choose whether to add or remove FIs from the maintenance'
        required: true
        default: 'add'
        type: choice
        options:
          - add
          - remove
      Domains:
        description: 'Comma-separated list of domains'
        required: true
        default: ''

jobs:
  prepare-maintenance:
    runs-on: ubuntu-latest
    outputs:
      formatted_data: ${{ steps.format-json.outputs.formatted_data }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Format domains JSON
        id: format-json
        env:
          DOMAINS: ${{ inputs.Domains }}
        run: |
          python3 <<EOF
          import json
          domains = [domain.strip() for domain in '${DOMAINS}'.split(',') if domain.strip()]
          formatted_data = [{"key": domain, "value": "true"} for domain in domains]
          with open('data.json', 'w') as f:
              json.dump(formatted_data, f, indent=2)
          EOF

          # Save formatted JSON as a single line in output
          echo "formatted_data=$(jq -c . data.json)" >> $GITHUB_ENV
          echo "::set-output name=formatted_data::$(jq -c . data.json)"

      - name: Display formatted JSON for review
        run: |
          echo "Domains to be processed:"
          cat data.json

  # Approval step
  wait-for-approval:
    runs-on: ubuntu-latest
    needs: prepare-maintenance
    if: ${{ always() }} # Run regardless of previous job success/failure
    steps:
      - name: Request manual approval
        run: |
          echo "Please review the domains above. Approve or cancel the workflow to continue."
        # Wait indefinitely for approval by requiring a manual resume
        # Note: You can use environment-specific controls here in GitHub Actions UI

  # Update Cloudflare KV Store
  update-cloudflare:
    runs-on: ubuntu-latest
    needs: [prepare-maintenance, wait-for-approval]
    if: ${{ github.event.inputs.API == 'add' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update Cloudflare KV Store
        env:
          CF_AUTH_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          curl --location --request PUT 'https://api.cloudflare.com/client/v4/accounts/6deff3dcb08cded6b6a16a253c16f672/storage/kv/namespaces/9845eb89c99a4edf94a01ad7a40fcf76/bulk' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}' \
          --data "${{ needs.prepare-maintenance.outputs.formatted_data }}"
